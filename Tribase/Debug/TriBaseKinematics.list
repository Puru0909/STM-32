
TriBaseKinematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c70  08002c70  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c70  08002c70  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c70  08002c70  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c78  08002c78  00003c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002c88  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002c88  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c579  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d65  00000000  00000000  000105ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00012318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000955  00000000  00000000  00012f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001890e  00000000  00000000  0001385d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d578  00000000  00000000  0002c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872b3  00000000  00000000  000396e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  000c09dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c3b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c2c 	.word	0x08002c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c2c 	.word	0x08002c2c

0800014c <_ZN5MOTORC1EP12GPIO_TypeDeftS1_t>:
 */

#include "Motor.h"


MOTOR::MOTOR(GPIO_TypeDef * PORTA, uint16_t Pin1, GPIO_TypeDef * PORTB, uint16_t Pin2){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
	this->PORTA = PORTA;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	this->Pin1 = Pin1;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	811a      	strh	r2, [r3, #8]
	this->PORTB = PORTB;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	605a      	str	r2, [r3, #4]
	this->Pin2 = Pin2;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	8b3a      	ldrh	r2, [r7, #24]
 8000172:	815a      	strh	r2, [r3, #10]
}
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	4618      	mov	r0, r3
 8000178:	3714      	adds	r7, #20
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZN5MOTOR10motor_initEP17TIM_HandleTypeDefm>:

void MOTOR::motor_init(TIM_HandleTypeDef * timer, uint32_t CHANNEL){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	this->timer = timer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68ba      	ldr	r2, [r7, #8]
 8000190:	60da      	str	r2, [r3, #12]
	this->CHANNEL = CHANNEL;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	687a      	ldr	r2, [r7, #4]
 8000196:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(timer, CHANNEL);
 8000198:	6879      	ldr	r1, [r7, #4]
 800019a:	68b8      	ldr	r0, [r7, #8]
 800019c:	f001 fd5e 	bl	8001c5c <HAL_TIM_PWM_Start>
}
 80001a0:	bf00      	nop
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <_ZN5MOTOR9clockwiseEi>:

void MOTOR::clockwise(int pwm){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PORTA, Pin1, GPIO_PIN_SET);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	6818      	ldr	r0, [r3, #0]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	891b      	ldrh	r3, [r3, #8]
 80001ba:	2201      	movs	r2, #1
 80001bc:	4619      	mov	r1, r3
 80001be:	f001 f87d 	bl	80012bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, Pin2, GPIO_PIN_RESET);
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	6858      	ldr	r0, [r3, #4]
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	895b      	ldrh	r3, [r3, #10]
 80001ca:	2200      	movs	r2, #0
 80001cc:	4619      	mov	r1, r3
 80001ce:	f001 f875 	bl	80012bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(this->timer, this->CHANNEL , pwm);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	691b      	ldr	r3, [r3, #16]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d105      	bne.n	80001e6 <_ZN5MOTOR9clockwiseEi+0x3e>
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	683a      	ldr	r2, [r7, #0]
 80001e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80001e4:	e018      	b.n	8000218 <_ZN5MOTOR9clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(this->timer, this->CHANNEL , pwm);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	2b04      	cmp	r3, #4
 80001ec:	d105      	bne.n	80001fa <_ZN5MOTOR9clockwiseEi+0x52>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80001f8:	e00e      	b.n	8000218 <_ZN5MOTOR9clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(this->timer, this->CHANNEL , pwm);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	2b08      	cmp	r3, #8
 8000200:	d105      	bne.n	800020e <_ZN5MOTOR9clockwiseEi+0x66>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	68db      	ldr	r3, [r3, #12]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	683a      	ldr	r2, [r7, #0]
 800020a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800020c:	e004      	b.n	8000218 <_ZN5MOTOR9clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(this->timer, this->CHANNEL , pwm);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	683a      	ldr	r2, [r7, #0]
 8000216:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN5MOTOR14anti_clockwiseEi>:
void MOTOR::anti_clockwise(int pwm){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(PORTA, Pin1, GPIO_PIN_RESET);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	6818      	ldr	r0, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	891b      	ldrh	r3, [r3, #8]
 8000232:	2200      	movs	r2, #0
 8000234:	4619      	mov	r1, r3
 8000236:	f001 f841 	bl	80012bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, Pin2, GPIO_PIN_SET);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	6858      	ldr	r0, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	895b      	ldrh	r3, [r3, #10]
 8000242:	2201      	movs	r2, #1
 8000244:	4619      	mov	r1, r3
 8000246:	f001 f839 	bl	80012bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , pwm);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d105      	bne.n	800025e <_ZN5MOTOR14anti_clockwiseEi+0x3e>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	683a      	ldr	r2, [r7, #0]
 800025a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800025c:	e018      	b.n	8000290 <_ZN5MOTOR14anti_clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , pwm);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	2b04      	cmp	r3, #4
 8000264:	d105      	bne.n	8000272 <_ZN5MOTOR14anti_clockwiseEi+0x52>
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000270:	e00e      	b.n	8000290 <_ZN5MOTOR14anti_clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , pwm);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	2b08      	cmp	r3, #8
 8000278:	d105      	bne.n	8000286 <_ZN5MOTOR14anti_clockwiseEi+0x66>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000284:	e004      	b.n	8000290 <_ZN5MOTOR14anti_clockwiseEi+0x70>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , pwm);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <_ZN5MOTOR5brakeEv>:
void MOTOR::brake(){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PORTA, Pin1, GPIO_PIN_RESET);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	891b      	ldrh	r3, [r3, #8]
 80002a8:	2200      	movs	r2, #0
 80002aa:	4619      	mov	r1, r3
 80002ac:	f001 f806 	bl	80012bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTB, Pin2, GPIO_PIN_RESET);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6858      	ldr	r0, [r3, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	895b      	ldrh	r3, [r3, #10]
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	f000 fffe 	bl	80012bc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , 0);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d105      	bne.n	80002d4 <_ZN5MOTOR5brakeEv+0x3c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002d2:	e018      	b.n	8000306 <_ZN5MOTOR5brakeEv+0x6e>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , 0);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	2b04      	cmp	r3, #4
 80002da:	d105      	bne.n	80002e8 <_ZN5MOTOR5brakeEv+0x50>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80002e6:	e00e      	b.n	8000306 <_ZN5MOTOR5brakeEv+0x6e>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , 0);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	2b08      	cmp	r3, #8
 80002ee:	d105      	bne.n	80002fc <_ZN5MOTOR5brakeEv+0x64>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80002fa:	e004      	b.n	8000306 <_ZN5MOTOR5brakeEv+0x6e>
	__HAL_TIM_SET_COMPARE(timer, CHANNEL , 0);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2200      	movs	r2, #0
 8000304:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_ZN18tribase_kinematicsC1EP5MOTORS1_S1_>:
#include "Motor.h"
#include "main.h"



tribase_kinematics::tribase_kinematics(MOTOR* motor_1, MOTOR* motor_2, MOTOR* motor_3){
 800030e:	b480      	push	{r7}
 8000310:	b085      	sub	sp, #20
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
 800031a:	603b      	str	r3, [r7, #0]
	this->motor_1 = motor_1;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	601a      	str	r2, [r3, #0]
	this->motor_2 = motor_2;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	605a      	str	r2, [r3, #4]
	this->motor_3 = motor_3;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	609a      	str	r2, [r3, #8]
}
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4618      	mov	r0, r3
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <_ZN18tribase_kinematics7forwardEhh>:
//	this->timer = timer;
//	this->CHANNEL = CHANNEL;
//	HAL_TIM_PWM_Start(timer, CHANNEL);
//}

void tribase_kinematics::forward(uint8_t pwm_2, uint8_t pwm_3){
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	460b      	mov	r3, r1
 8000344:	70fb      	strb	r3, [r7, #3]
 8000346:	4613      	mov	r3, r2
 8000348:	70bb      	strb	r3, [r7, #2]
	motor_1->brake();
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffa2 	bl	8000298 <_ZN5MOTOR5brakeEv>
	motor_2->clockwise(pwm_2);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	78fa      	ldrb	r2, [r7, #3]
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff23 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
	motor_3->anti_clockwise(pwm_3);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	78ba      	ldrb	r2, [r7, #2]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff58 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <_ZN18tribase_kinematics8backwardEhh>:
void tribase_kinematics::backward(uint8_t pwm_2, uint8_t pwm_3) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
 8000384:	4613      	mov	r3, r2
 8000386:	70bb      	strb	r3, [r7, #2]
  motor_1->brake();
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff83 	bl	8000298 <_ZN5MOTOR5brakeEv>
  motor_2->anti_clockwise(pwm_2);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	78fa      	ldrb	r2, [r7, #3]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff40 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
  motor_3->clockwise(pwm_3);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	78ba      	ldrb	r2, [r7, #2]
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fefd 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_ZN18tribase_kinematics4leftEhhh>:

void tribase_kinematics::left(uint8_t pwm_1, uint8_t pwm_2, uint8_t pwm_3) {
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b082      	sub	sp, #8
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	4608      	mov	r0, r1
 80003c0:	4611      	mov	r1, r2
 80003c2:	461a      	mov	r2, r3
 80003c4:	4603      	mov	r3, r0
 80003c6:	70fb      	strb	r3, [r7, #3]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70bb      	strb	r3, [r7, #2]
 80003cc:	4613      	mov	r3, r2
 80003ce:	707b      	strb	r3, [r7, #1]
  motor_1->clockwise(pwm_1);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	78fa      	ldrb	r2, [r7, #3]
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff fee5 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
  motor_2->anti_clockwise(pwm_2);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	78ba      	ldrb	r2, [r7, #2]
 80003e4:	4611      	mov	r1, r2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff1a 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
  motor_3->anti_clockwise(pwm_3);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	787a      	ldrb	r2, [r7, #1]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff13 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <_ZN18tribase_kinematics5rightEhhh>:

void tribase_kinematics::right(uint8_t pwm_1, uint8_t pwm_2, uint8_t pwm_3) {
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	4608      	mov	r0, r1
 800040c:	4611      	mov	r1, r2
 800040e:	461a      	mov	r2, r3
 8000410:	4603      	mov	r3, r0
 8000412:	70fb      	strb	r3, [r7, #3]
 8000414:	460b      	mov	r3, r1
 8000416:	70bb      	strb	r3, [r7, #2]
 8000418:	4613      	mov	r3, r2
 800041a:	707b      	strb	r3, [r7, #1]
  motor_1->anti_clockwise(pwm_1);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	78fa      	ldrb	r2, [r7, #3]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff fefb 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
  motor_2->clockwise(pwm_2);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	78ba      	ldrb	r2, [r7, #2]
 8000430:	4611      	mov	r1, r2
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feb8 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
  motor_3->clockwise(pwm_3);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	787a      	ldrb	r2, [r7, #1]
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff feb1 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_ZN18tribase_kinematics14anti_clockwiseEhhh>:
//void tribase_kinematics::right_bakward(uint8_t pwm_1, uint8_t pwm_2, uint8_t pwm_3) {
//  motor_1->anti_clockwise(pwm_1);
//  motor_2->anti_clockwise(pwm_2);
//  motor_3->clockwise(pwm_3);
//}
void tribase_kinematics::anti_clockwise(uint8_t pwm_1, uint8_t pwm_2, uint8_t pwm_3) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	4608      	mov	r0, r1
 8000458:	4611      	mov	r1, r2
 800045a:	461a      	mov	r2, r3
 800045c:	4603      	mov	r3, r0
 800045e:	70fb      	strb	r3, [r7, #3]
 8000460:	460b      	mov	r3, r1
 8000462:	70bb      	strb	r3, [r7, #2]
 8000464:	4613      	mov	r3, r2
 8000466:	707b      	strb	r3, [r7, #1]
  motor_1->clockwise(pwm_1);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	78fa      	ldrb	r2, [r7, #3]
 800046e:	4611      	mov	r1, r2
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe99 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
  motor_2->clockwise(pwm_2);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	78ba      	ldrb	r2, [r7, #2]
 800047c:	4611      	mov	r1, r2
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fe92 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
  motor_3->clockwise(pwm_3);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	787a      	ldrb	r2, [r7, #1]
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff fe8b 	bl	80001a8 <_ZN5MOTOR9clockwiseEi>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <_ZN18tribase_kinematics9clockwiseEhhh>:

void tribase_kinematics::clockwise(uint8_t pwm_1, uint8_t pwm_2, uint8_t pwm_3) {
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	4608      	mov	r0, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	461a      	mov	r2, r3
 80004a8:	4603      	mov	r3, r0
 80004aa:	70fb      	strb	r3, [r7, #3]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70bb      	strb	r3, [r7, #2]
 80004b0:	4613      	mov	r3, r2
 80004b2:	707b      	strb	r3, [r7, #1]
  motor_1->anti_clockwise(pwm_1);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	78fa      	ldrb	r2, [r7, #3]
 80004ba:	4611      	mov	r1, r2
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff feaf 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
  motor_2->anti_clockwise(pwm_2);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	78ba      	ldrb	r2, [r7, #2]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fea8 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>
  motor_3->anti_clockwise(pwm_3);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	787a      	ldrb	r2, [r7, #1]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fea1 	bl	8000220 <_ZN5MOTOR14anti_clockwiseEi>

}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_ZN18tribase_kinematics5brakeEv>:
void tribase_kinematics::brake() {
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
  motor_1->brake();
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fed0 	bl	8000298 <_ZN5MOTOR5brakeEv>
  motor_2->brake();
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fecb 	bl	8000298 <_ZN5MOTOR5brakeEv>
  motor_3->brake();
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fec6 	bl	8000298 <_ZN5MOTOR5brakeEv>

}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fc05 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8b5 	bl	800068c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa11 	bl	8000948 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000526:	f000 f901 	bl	800072c <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 800052a:	f000 f9df 	bl	80008ec <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  motor_1.motor_init(&htim1, TIM_CHANNEL_1);
 800052e:	2200      	movs	r2, #0
 8000530:	494e      	ldr	r1, [pc, #312]	@ (800066c <main+0x158>)
 8000532:	484f      	ldr	r0, [pc, #316]	@ (8000670 <main+0x15c>)
 8000534:	f7ff fe24 	bl	8000180 <_ZN5MOTOR10motor_initEP17TIM_HandleTypeDefm>
  motor_2.motor_init(&htim1, TIM_CHANNEL_2);
 8000538:	2204      	movs	r2, #4
 800053a:	494c      	ldr	r1, [pc, #304]	@ (800066c <main+0x158>)
 800053c:	484d      	ldr	r0, [pc, #308]	@ (8000674 <main+0x160>)
 800053e:	f7ff fe1f 	bl	8000180 <_ZN5MOTOR10motor_initEP17TIM_HandleTypeDefm>
  motor_3.motor_init(&htim1, TIM_CHANNEL_3);
 8000542:	2208      	movs	r2, #8
 8000544:	4949      	ldr	r1, [pc, #292]	@ (800066c <main+0x158>)
 8000546:	484c      	ldr	r0, [pc, #304]	@ (8000678 <main+0x164>)
 8000548:	f7ff fe1a 	bl	8000180 <_ZN5MOTOR10motor_initEP17TIM_HandleTypeDefm>
  tribase_kinematics obj(&motor_1, &motor_2, &motor_3);//
 800054c:	4638      	mov	r0, r7
 800054e:	4b4a      	ldr	r3, [pc, #296]	@ (8000678 <main+0x164>)
 8000550:	4a48      	ldr	r2, [pc, #288]	@ (8000674 <main+0x160>)
 8000552:	4947      	ldr	r1, [pc, #284]	@ (8000670 <main+0x15c>)
 8000554:	f7ff fedb 	bl	800030e <_ZN18tribase_kinematicsC1EP5MOTORS1_S1_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart3, received_data, 10, HAL_MAX_DELAY);
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	220a      	movs	r2, #10
 800055e:	4947      	ldr	r1, [pc, #284]	@ (800067c <main+0x168>)
 8000560:	4847      	ldr	r0, [pc, #284]	@ (8000680 <main+0x16c>)
 8000562:	f002 f956 	bl	8002812 <HAL_UART_Receive>

	  	  for (uint8_t i = 0; i<10; i++){
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e035      	b.n	80005d8 <main+0xc4>
	  	 			  if (received_data[i] == 1 && received_data[(i+9)%10] == 4){
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	4a43      	ldr	r2, [pc, #268]	@ (800067c <main+0x168>)
 8000570:	5cd3      	ldrb	r3, [r2, r3]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d12d      	bne.n	80005d2 <main+0xbe>
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	f103 0109 	add.w	r1, r3, #9
 800057c:	4b41      	ldr	r3, [pc, #260]	@ (8000684 <main+0x170>)
 800057e:	fb83 2301 	smull	r2, r3, r3, r1
 8000582:	109a      	asrs	r2, r3, #2
 8000584:	17cb      	asrs	r3, r1, #31
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1aca      	subs	r2, r1, r3
 8000592:	4b3a      	ldr	r3, [pc, #232]	@ (800067c <main+0x168>)
 8000594:	5c9b      	ldrb	r3, [r3, r2]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d11b      	bne.n	80005d2 <main+0xbe>
	  	 				  for (uint8_t j = 0; j<10; j++){
 800059a:	2300      	movs	r3, #0
 800059c:	73bb      	strb	r3, [r7, #14]
 800059e:	e015      	b.n	80005cc <main+0xb8>
	  	 					  ordered_data[j] = received_data[(i+j)%10];
 80005a0:	7bfa      	ldrb	r2, [r7, #15]
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	18d1      	adds	r1, r2, r3
 80005a6:	4b37      	ldr	r3, [pc, #220]	@ (8000684 <main+0x170>)
 80005a8:	fb83 2301 	smull	r2, r3, r3, r1
 80005ac:	109a      	asrs	r2, r3, #2
 80005ae:	17cb      	asrs	r3, r1, #31
 80005b0:	1ad2      	subs	r2, r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	1aca      	subs	r2, r1, r3
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	492f      	ldr	r1, [pc, #188]	@ (800067c <main+0x168>)
 80005c0:	5c89      	ldrb	r1, [r1, r2]
 80005c2:	4a31      	ldr	r2, [pc, #196]	@ (8000688 <main+0x174>)
 80005c4:	54d1      	strb	r1, [r2, r3]
	  	 				  for (uint8_t j = 0; j<10; j++){
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73bb      	strb	r3, [r7, #14]
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	2b09      	cmp	r3, #9
 80005d0:	d9e6      	bls.n	80005a0 <main+0x8c>
	  	  for (uint8_t i = 0; i<10; i++){
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3301      	adds	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b09      	cmp	r3, #9
 80005dc:	d9c6      	bls.n	800056c <main+0x58>
//		}
//		else {
//			obj.brake();
//		}
//
	  		  if(ordered_data[1] != 0){
 80005de:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <main+0x174>)
 80005e0:	785b      	ldrb	r3, [r3, #1]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <main+0xe0>
	  			  obj.forward(100,100);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2264      	movs	r2, #100	@ 0x64
 80005ea:	2164      	movs	r1, #100	@ 0x64
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fea4 	bl	800033a <_ZN18tribase_kinematics7forwardEhh>
 80005f2:	e7b1      	b.n	8000558 <main+0x44>
	          }
	  		  else if(ordered_data[2] != 0){
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <main+0x174>)
 80005f6:	789b      	ldrb	r3, [r3, #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d006      	beq.n	800060a <main+0xf6>
	  			  obj.backward(100,100);
 80005fc:	463b      	mov	r3, r7
 80005fe:	2264      	movs	r2, #100	@ 0x64
 8000600:	2164      	movs	r1, #100	@ 0x64
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff feb8 	bl	8000378 <_ZN18tribase_kinematics8backwardEhh>
 8000608:	e7a6      	b.n	8000558 <main+0x44>
	  		  }
              else if(ordered_data[3] != 0){
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <main+0x174>)
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <main+0x10c>
            	  obj.right(100,100,60);
 8000612:	4638      	mov	r0, r7
 8000614:	233c      	movs	r3, #60	@ 0x3c
 8000616:	2264      	movs	r2, #100	@ 0x64
 8000618:	2164      	movs	r1, #100	@ 0x64
 800061a:	f7ff fef2 	bl	8000402 <_ZN18tribase_kinematics5rightEhhh>
 800061e:	e79b      	b.n	8000558 <main+0x44>
  	  		  }
              else if(ordered_data[4] != 0){
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <main+0x174>)
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <main+0x122>
            	  obj.left(100,60,60);
 8000628:	4638      	mov	r0, r7
 800062a:	233c      	movs	r3, #60	@ 0x3c
 800062c:	223c      	movs	r2, #60	@ 0x3c
 800062e:	2164      	movs	r1, #100	@ 0x64
 8000630:	f7ff fec1 	bl	80003b6 <_ZN18tribase_kinematics4leftEhhh>
 8000634:	e790      	b.n	8000558 <main+0x44>
              }
              else if(ordered_data[4] != 0){
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <main+0x174>)
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <main+0x138>
                  obj.clockwise(100,100,100);
 800063e:	4638      	mov	r0, r7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2264      	movs	r2, #100	@ 0x64
 8000644:	2164      	movs	r1, #100	@ 0x64
 8000646:	f7ff ff28 	bl	800049a <_ZN18tribase_kinematics9clockwiseEhhh>
 800064a:	e785      	b.n	8000558 <main+0x44>
              }
              else if(ordered_data[5] != 0) {
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <main+0x174>)
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <main+0x14e>
            	  obj.anti_clockwise(100,100,100);
 8000654:	4638      	mov	r0, r7
 8000656:	2364      	movs	r3, #100	@ 0x64
 8000658:	2264      	movs	r2, #100	@ 0x64
 800065a:	2164      	movs	r1, #100	@ 0x64
 800065c:	f7ff fef7 	bl	800044e <_ZN18tribase_kinematics14anti_clockwiseEhhh>
 8000660:	e77a      	b.n	8000558 <main+0x44>
              }
              else{
            	  obj.brake();
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff3e 	bl	80004e6 <_ZN18tribase_kinematics5brakeEv>
//	  		  motor_3.brake();
//	  		  HAL_Delay(3000);



  }
 800066a:	e775      	b.n	8000558 <main+0x44>
 800066c:	20000028 	.word	0x20000028
 8000670:	200000d0 	.word	0x200000d0
 8000674:	200000e4 	.word	0x200000e4
 8000678:	200000f8 	.word	0x200000f8
 800067c:	200000b8 	.word	0x200000b8
 8000680:	20000070 	.word	0x20000070
 8000684:	66666667 	.word	0x66666667
 8000688:	200000c4 	.word	0x200000c4

0800068c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	@ 0x40
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2228      	movs	r2, #40	@ 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fa9a 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fe09 	bl	80012ec <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf14      	ite	ne
 80006e0:	2301      	movne	r3, #1
 80006e2:	2300      	moveq	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80006ea:	f000 f9b1 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f871 	bl	80017f0 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800071e:	f000 f997 	bl	8000a50 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3740      	adds	r7, #64	@ 0x40
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b096      	sub	sp, #88	@ 0x58
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2220      	movs	r2, #32
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fa35 	bl	8002bd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800076a:	4b5e      	ldr	r3, [pc, #376]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 800076c:	4a5e      	ldr	r2, [pc, #376]	@ (80008e8 <_ZL12MX_TIM1_Initv+0x1bc>)
 800076e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000770:	4b5c      	ldr	r3, [pc, #368]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b5b      	ldr	r3, [pc, #364]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800077c:	4b59      	ldr	r3, [pc, #356]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b58      	ldr	r3, [pc, #352]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000788:	4b56      	ldr	r3, [pc, #344]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078e:	4b55      	ldr	r3, [pc, #340]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000790:	2280      	movs	r2, #128	@ 0x80
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000794:	4853      	ldr	r0, [pc, #332]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000796:	f001 f9b9 	bl	8001b0c <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 80007aa:	f000 f951 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007b8:	4619      	mov	r1, r3
 80007ba:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 80007bc:	f001 fbb2 	bl	8001f24 <HAL_TIM_ConfigClockSource>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 80007d0:	f000 f93e 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007d4:	4843      	ldr	r0, [pc, #268]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 80007d6:	f001 f9e8 	bl	8001baa <HAL_TIM_PWM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 80007ea:	f000 f931 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007fa:	4619      	mov	r1, r3
 80007fc:	4839      	ldr	r0, [pc, #228]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 80007fe:	f001 ff09 	bl	8002614 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_ZL12MX_TIM1_Initv+0xea>
  {
    Error_Handler();
 8000812:	f000 f91d 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	@ 0x60
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000822:	2300      	movs	r3, #0
 8000824:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	482a      	ldr	r0, [pc, #168]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 800083c:	f001 fab0 	bl	8001da0 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000850:	f000 f8fe 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	2204      	movs	r2, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 800085e:	f001 fa9f 	bl	8001da0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8000872:	f000 f8ed 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	2208      	movs	r2, #8
 800087c:	4619      	mov	r1, r3
 800087e:	4819      	ldr	r0, [pc, #100]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000880:	f001 fa8e 	bl	8001da0 <HAL_TIM_PWM_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf14      	ite	ne
 800088a:	2301      	movne	r3, #1
 800088c:	2300      	moveq	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <_ZL12MX_TIM1_Initv+0x16c>
  {
    Error_Handler();
 8000894:	f000 f8dc 	bl	8000a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	480a      	ldr	r0, [pc, #40]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008bc:	f001 ff08 	bl	80026d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <_ZL12MX_TIM1_Initv+0x1a8>
  {
    Error_Handler();
 80008d0:	f000 f8be 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008d6:	f000 f94f 	bl	8000b78 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	@ 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000028 	.word	0x20000028
 80008e8:	40012c00 	.word	0x40012c00

080008ec <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <_ZL19MX_USART3_UART_Initv+0x58>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <_ZL19MX_USART3_UART_Initv+0x54>)
 8000924:	f001 ff25 	bl	8002772 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	bf14      	ite	ne
 800092e:	2301      	movne	r3, #1
 8000930:	2300      	moveq	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8000938:	f000 f88a 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000070 	.word	0x20000070
 8000944:	40004800 	.word	0x40004800

08000948 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a37      	ldr	r2, [pc, #220]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a31      	ldr	r2, [pc, #196]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a2b      	ldr	r2, [pc, #172]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a25      	ldr	r2, [pc, #148]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <_ZL12MX_GPIO_Initv+0xf8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(internal_led_GPIO_Port, internal_led_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c2:	4820      	ldr	r0, [pc, #128]	@ (8000a44 <_ZL12MX_GPIO_Initv+0xfc>)
 80009c4:	f000 fc7a 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	21c0      	movs	r1, #192	@ 0xc0
 80009cc:	481e      	ldr	r0, [pc, #120]	@ (8000a48 <_ZL12MX_GPIO_Initv+0x100>)
 80009ce:	f000 fc75 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor2_c_Pin|motor2_ac_Pin|motor1_c_Pin|motor1_ac_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7146 	mov.w	r1, #792	@ 0x318
 80009d8:	481c      	ldr	r0, [pc, #112]	@ (8000a4c <_ZL12MX_GPIO_Initv+0x104>)
 80009da:	f000 fc6f 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : internal_led_Pin */
  GPIO_InitStruct.Pin = internal_led_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(internal_led_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <_ZL12MX_GPIO_Initv+0xfc>)
 80009f8:	f000 fadc 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	@ 0xc0
 80009fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <_ZL12MX_GPIO_Initv+0x100>)
 8000a14:	f000 face 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor2_c_Pin motor2_ac_Pin motor1_c_Pin motor1_ac_Pin */
  GPIO_InitStruct.Pin = motor2_c_Pin|motor2_ac_Pin|motor1_c_Pin|motor1_ac_Pin;
 8000a18:	f44f 7346 	mov.w	r3, #792	@ 0x318
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <_ZL12MX_GPIO_Initv+0x104>)
 8000a32:	f000 fabf 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40011000 	.word	0x40011000
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d11e      	bne.n	8000aaa <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d119      	bne.n	8000aaa <_Z41__static_initialization_and_destruction_0ii+0x4e>
MOTOR motor_1(GPIOB,GPIO_PIN_9,GPIOB, GPIO_PIN_8);
 8000a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a82:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000a86:	f7ff fb61 	bl	800014c <_ZN5MOTORC1EP12GPIO_TypeDeftS1_t>
MOTOR motor_2(GPIOB,GPIO_PIN_4,GPIOB, GPIO_PIN_3);
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000a94:	4809      	ldr	r0, [pc, #36]	@ (8000abc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a96:	f7ff fb59 	bl	800014c <_ZN5MOTORC1EP12GPIO_TypeDeftS1_t>
MOTOR motor_3(GPIOA,GPIO_PIN_6,GPIOA, GPIO_PIN_7);
 8000a9a:	2380      	movs	r3, #128	@ 0x80
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000aa0:	2240      	movs	r2, #64	@ 0x40
 8000aa2:	4907      	ldr	r1, [pc, #28]	@ (8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000aa4:	4807      	ldr	r0, [pc, #28]	@ (8000ac4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000aa6:	f7ff fb51 	bl	800014c <_ZN5MOTORC1EP12GPIO_TypeDeftS1_t>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	200000d0 	.word	0x200000d0
 8000abc:	200000e4 	.word	0x200000e4
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	200000f8 	.word	0x200000f8

08000ac8 <_GLOBAL__sub_I_htim1>:
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ffc3 	bl	8000a5c <_Z41__static_initialization_and_destruction_0ii>
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_MspInit+0x5c>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_MspInit+0x60>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_MspInit+0x60>)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000

08000b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <HAL_TIM_Base_MspInit+0x34>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10b      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_TIM_Base_MspInit+0x38>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_TIM_Base_MspInit+0x38>)
 8000b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_TIM_Base_MspInit+0x38>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_TIM_MspPostInit+0x5c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d118      	bne.n	8000bca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_TIM_MspPostInit+0x60>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_TIM_MspPostInit+0x60>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_TIM_MspPostInit+0x60>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = motor1_pwm_Pin|motor2_pwm_Pin|motor3_pwm_Pin;
 8000bb0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_TIM_MspPostInit+0x64>)
 8000bc6:	f000 f9f5 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <HAL_UART_MspInit+0x8c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d131      	bne.n	8000c64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c0a:	61d3      	str	r3, [r2, #28]
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_MspInit+0x90>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <HAL_UART_MspInit+0x94>)
 8000c46:	f000 f9b5 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_UART_MspInit+0x94>)
 8000c60:	f000 f9a8 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f874 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff fff8 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ce2:	490c      	ldr	r1, [pc, #48]	@ (8000d14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a09      	ldr	r2, [pc, #36]	@ (8000d1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cf8:	4c09      	ldr	r4, [pc, #36]	@ (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f001 ff6d 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff fc03 	bl	8000514 <main>
  bx lr
 8000d0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d18:	08002c7c 	.word	0x08002c7c
  ldr r2, =_sbss
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d20:	20000110 	.word	0x20000110

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_Init+0x28>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_Init+0x28>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f907 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f808 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fec8 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x54>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x58>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f911 	bl	8000f9a <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00e      	b.n	8000da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d80a      	bhi.n	8000d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f8e7 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4a06      	ldr	r2, [pc, #24]	@ (8000db0 <HAL_InitTick+0x5c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a03      	ldr	r2, [pc, #12]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	2000010c 	.word	0x2000010c

08000dd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	2000010c 	.word	0x2000010c

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff90 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff49 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff5e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff90 	bl	8000ea4 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5f 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffb0 	bl	8000f08 <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b08b      	sub	sp, #44	@ 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e169      	b.n	800129c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8158 	bne.w	8001296 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a9a      	ldr	r2, [pc, #616]	@ (8001254 <HAL_GPIO_Init+0x2a0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d05e      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
 8000ff0:	4a98      	ldr	r2, [pc, #608]	@ (8001254 <HAL_GPIO_Init+0x2a0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d875      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 8000ff6:	4a98      	ldr	r2, [pc, #608]	@ (8001258 <HAL_GPIO_Init+0x2a4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d058      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
 8000ffc:	4a96      	ldr	r2, [pc, #600]	@ (8001258 <HAL_GPIO_Init+0x2a4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d86f      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 8001002:	4a96      	ldr	r2, [pc, #600]	@ (800125c <HAL_GPIO_Init+0x2a8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d052      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
 8001008:	4a94      	ldr	r2, [pc, #592]	@ (800125c <HAL_GPIO_Init+0x2a8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d869      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 800100e:	4a94      	ldr	r2, [pc, #592]	@ (8001260 <HAL_GPIO_Init+0x2ac>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d04c      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
 8001014:	4a92      	ldr	r2, [pc, #584]	@ (8001260 <HAL_GPIO_Init+0x2ac>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d863      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 800101a:	4a92      	ldr	r2, [pc, #584]	@ (8001264 <HAL_GPIO_Init+0x2b0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d046      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
 8001020:	4a90      	ldr	r2, [pc, #576]	@ (8001264 <HAL_GPIO_Init+0x2b0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d85d      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 8001026:	2b12      	cmp	r3, #18
 8001028:	d82a      	bhi.n	8001080 <HAL_GPIO_Init+0xcc>
 800102a:	2b12      	cmp	r3, #18
 800102c:	d859      	bhi.n	80010e2 <HAL_GPIO_Init+0x12e>
 800102e:	a201      	add	r2, pc, #4	@ (adr r2, 8001034 <HAL_GPIO_Init+0x80>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	080010af 	.word	0x080010af
 8001038:	08001089 	.word	0x08001089
 800103c:	0800109b 	.word	0x0800109b
 8001040:	080010dd 	.word	0x080010dd
 8001044:	080010e3 	.word	0x080010e3
 8001048:	080010e3 	.word	0x080010e3
 800104c:	080010e3 	.word	0x080010e3
 8001050:	080010e3 	.word	0x080010e3
 8001054:	080010e3 	.word	0x080010e3
 8001058:	080010e3 	.word	0x080010e3
 800105c:	080010e3 	.word	0x080010e3
 8001060:	080010e3 	.word	0x080010e3
 8001064:	080010e3 	.word	0x080010e3
 8001068:	080010e3 	.word	0x080010e3
 800106c:	080010e3 	.word	0x080010e3
 8001070:	080010e3 	.word	0x080010e3
 8001074:	080010e3 	.word	0x080010e3
 8001078:	08001091 	.word	0x08001091
 800107c:	080010a5 	.word	0x080010a5
 8001080:	4a79      	ldr	r2, [pc, #484]	@ (8001268 <HAL_GPIO_Init+0x2b4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001086:	e02c      	b.n	80010e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	623b      	str	r3, [r7, #32]
          break;
 800108e:	e029      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	3304      	adds	r3, #4
 8001096:	623b      	str	r3, [r7, #32]
          break;
 8001098:	e024      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	3308      	adds	r3, #8
 80010a0:	623b      	str	r3, [r7, #32]
          break;
 80010a2:	e01f      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	330c      	adds	r3, #12
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e01a      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b6:	2304      	movs	r3, #4
 80010b8:	623b      	str	r3, [r7, #32]
          break;
 80010ba:	e013      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d105      	bne.n	80010d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c4:	2308      	movs	r3, #8
 80010c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	611a      	str	r2, [r3, #16]
          break;
 80010ce:	e009      	b.n	80010e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d0:	2308      	movs	r3, #8
 80010d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	615a      	str	r2, [r3, #20]
          break;
 80010da:	e003      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x130>
          break;
 80010e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2bff      	cmp	r3, #255	@ 0xff
 80010e8:	d801      	bhi.n	80010ee <HAL_GPIO_Init+0x13a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	e001      	b.n	80010f2 <HAL_GPIO_Init+0x13e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3304      	adds	r3, #4
 80010f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2bff      	cmp	r3, #255	@ 0xff
 80010f8:	d802      	bhi.n	8001100 <HAL_GPIO_Init+0x14c>
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x152>
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	3b08      	subs	r3, #8
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	210f      	movs	r1, #15
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	401a      	ands	r2, r3
 8001118:	6a39      	ldr	r1, [r7, #32]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	431a      	orrs	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80b1 	beq.w	8001296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001134:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a4c      	ldr	r2, [pc, #304]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b4a      	ldr	r3, [pc, #296]	@ (800126c <HAL_GPIO_Init+0x2b8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800114c:	4a48      	ldr	r2, [pc, #288]	@ (8001270 <HAL_GPIO_Init+0x2bc>)
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a40      	ldr	r2, [pc, #256]	@ (8001274 <HAL_GPIO_Init+0x2c0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d013      	beq.n	80011a0 <HAL_GPIO_Init+0x1ec>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a3f      	ldr	r2, [pc, #252]	@ (8001278 <HAL_GPIO_Init+0x2c4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d00d      	beq.n	800119c <HAL_GPIO_Init+0x1e8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3e      	ldr	r2, [pc, #248]	@ (800127c <HAL_GPIO_Init+0x2c8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <HAL_GPIO_Init+0x1e4>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3d      	ldr	r2, [pc, #244]	@ (8001280 <HAL_GPIO_Init+0x2cc>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <HAL_GPIO_Init+0x1e0>
 8001190:	2303      	movs	r3, #3
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 8001194:	2304      	movs	r3, #4
 8001196:	e004      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 8001198:	2302      	movs	r3, #2
 800119a:	e002      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <HAL_GPIO_Init+0x1ee>
 80011a0:	2300      	movs	r3, #0
 80011a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a4:	f002 0203 	and.w	r2, r2, #3
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b2:	492f      	ldr	r1, [pc, #188]	@ (8001270 <HAL_GPIO_Init+0x2bc>)
 80011b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	492c      	ldr	r1, [pc, #176]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4928      	ldr	r1, [pc, #160]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f4:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	4922      	ldr	r1, [pc, #136]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60cb      	str	r3, [r1, #12]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	491e      	ldr	r1, [pc, #120]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800121c:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4918      	ldr	r1, [pc, #96]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4914      	ldr	r1, [pc, #80]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001234:	4013      	ands	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d021      	beq.n	8001288 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	490e      	ldr	r1, [pc, #56]	@ (8001284 <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e021      	b.n	8001296 <HAL_GPIO_Init+0x2e2>
 8001252:	bf00      	nop
 8001254:	10320000 	.word	0x10320000
 8001258:	10310000 	.word	0x10310000
 800125c:	10220000 	.word	0x10220000
 8001260:	10210000 	.word	0x10210000
 8001264:	10120000 	.word	0x10120000
 8001268:	10110000 	.word	0x10110000
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40011000 	.word	0x40011000
 8001280:	40011400 	.word	0x40011400
 8001284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_GPIO_Init+0x304>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	43db      	mvns	r3, r3
 8001290:	4909      	ldr	r1, [pc, #36]	@ (80012b8 <HAL_GPIO_Init+0x304>)
 8001292:	4013      	ands	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	3301      	adds	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f47f ae8e 	bne.w	8000fc8 <HAL_GPIO_Init+0x14>
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	372c      	adds	r7, #44	@ 0x2c
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	611a      	str	r2, [r3, #16]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e272      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130c:	4b92      	ldr	r3, [pc, #584]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b04      	cmp	r3, #4
 8001316:	d00c      	beq.n	8001332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001318:	4b8f      	ldr	r3, [pc, #572]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d112      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
 8001324:	4b8c      	ldr	r3, [pc, #560]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001330:	d10b      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06c      	beq.n	8001418 <HAL_RCC_OscConfig+0x12c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d168      	bne.n	8001418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e24c      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x76>
 8001354:	4b80      	ldr	r3, [pc, #512]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7f      	ldr	r2, [pc, #508]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e02e      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b7b      	ldr	r3, [pc, #492]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7a      	ldr	r2, [pc, #488]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b78      	ldr	r3, [pc, #480]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a77      	ldr	r2, [pc, #476]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0xbc>
 800138e:	4b72      	ldr	r3, [pc, #456]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a71      	ldr	r2, [pc, #452]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6f      	ldr	r3, [pc, #444]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6e      	ldr	r2, [pc, #440]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 80013a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b68      	ldr	r3, [pc, #416]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a67      	ldr	r2, [pc, #412]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fd06 	bl	8000dd8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fd02 	bl	8000dd8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	@ 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e200      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe4>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcf2 	bl	8000dd8 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcee 	bl	8000dd8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1ec      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x10c>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001426:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001432:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c0      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4939      	ldr	r1, [pc, #228]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b36      	ldr	r3, [pc, #216]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fca7 	bl	8000dd8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fca3 	bl	8000dd8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1a1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4927      	ldr	r1, [pc, #156]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc86 	bl	8000dd8 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc82 	bl	8000dd8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e180      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03a      	beq.n	8001570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_RCC_OscConfig+0x274>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fc66 	bl	8000dd8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fc62 	bl	8000dd8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e160      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 face 	bl	8001ad0 <RCC_Delay>
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_RCC_OscConfig+0x274>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fc4c 	bl	8000dd8 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e00f      	b.n	8001564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc48 	bl	8000dd8 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d908      	bls.n	8001564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e146      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	42420000 	.word	0x42420000
 8001560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b92      	ldr	r3, [pc, #584]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e9      	bne.n	8001544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a6 	beq.w	80016ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8b      	ldr	r3, [pc, #556]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10d      	bne.n	80015aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b88      	ldr	r3, [pc, #544]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a87      	ldr	r2, [pc, #540]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b85      	ldr	r3, [pc, #532]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b82      	ldr	r3, [pc, #520]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b7f      	ldr	r3, [pc, #508]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fc09 	bl	8000dd8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fc05 	bl	8000dd8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	@ 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e103      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x312>
 80015f0:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a6e      	ldr	r2, [pc, #440]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e02d      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001606:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a69      	ldr	r2, [pc, #420]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b67      	ldr	r3, [pc, #412]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a66      	ldr	r2, [pc, #408]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x356>
 8001628:	4b61      	ldr	r3, [pc, #388]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a60      	ldr	r2, [pc, #384]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b5e      	ldr	r3, [pc, #376]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a5d      	ldr	r2, [pc, #372]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001642:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a5a      	ldr	r2, [pc, #360]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a57      	ldr	r2, [pc, #348]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbb9 	bl	8000dd8 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fbb5 	bl	8000dd8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0b1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b4b      	ldr	r3, [pc, #300]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x37e>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fba3 	bl	8000dd8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb9f 	bl	8000dd8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e09b      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d061      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d146      	bne.n	8001776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb73 	bl	8000dd8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fb6f 	bl	8000dd8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e06d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4921      	ldr	r1, [pc, #132]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a19      	ldr	r1, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	430b      	orrs	r3, r1
 8001742:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb43 	bl	8000dd8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fb3f 	bl	8000dd8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x46a>
 8001774:	e035      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb2c 	bl	8000dd8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb28 	bl	8000dd8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e026      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x498>
 80017a2:	e01e      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e019      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_RCC_OscConfig+0x500>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d0      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4965      	ldr	r1, [pc, #404]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001856:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800186e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b41      	ldr	r3, [pc, #260]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e073      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3d      	ldr	r3, [pc, #244]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b39      	ldr	r3, [pc, #228]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff fa7a 	bl	8000dd8 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff fa76 	bl	8000dd8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e053      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d210      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4922      	ldr	r1, [pc, #136]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f821 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1cc>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_ClockConfig+0x1d0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f9d8 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	08002c44 	.word	0x08002c44
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x36>
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	e027      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0c5b      	lsrs	r3, r3, #17
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a26:	fb03 f202 	mul.w	r2, r3, r2
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e004      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	613b      	str	r3, [r7, #16]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	007a1200 	.word	0x007a1200
 8001a60:	08002c5c 	.word	0x08002c5c
 8001a64:	08002c6c 	.word	0x08002c6c
 8001a68:	003d0900 	.word	0x003d0900

08001a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a70:	4b02      	ldr	r3, [pc, #8]	@ (8001a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000000 	.word	0x20000000

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff2 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	@ (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	08002c54 	.word	0x08002c54

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0adb      	lsrs	r3, r3, #11
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	@ (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	08002c54 	.word	0x08002c54

08001ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <RCC_Delay+0x34>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <RCC_Delay+0x38>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0a5b      	lsrs	r3, r3, #9
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aec:	bf00      	nop
  }
  while (Delay --);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <RCC_Delay+0x1c>
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000000 	.word	0x20000000
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e041      	b.n	8001ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff f802 	bl	8000b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3304      	adds	r3, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	f000 fab2 	bl	80020b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e041      	b.n	8001c40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d106      	bne.n	8001bd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f839 	bl	8001c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3304      	adds	r3, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f000 fa63 	bl	80020b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_TIM_PWM_Start+0x24>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e022      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d109      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x3e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	e015      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d109      	bne.n	8001cb4 <HAL_TIM_PWM_Start+0x58>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e008      	b.n	8001cc6 <HAL_TIM_PWM_Start+0x6a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e05e      	b.n	8001d8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d104      	bne.n	8001cde <HAL_TIM_PWM_Start+0x82>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cdc:	e013      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_PWM_Start+0x92>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cec:	e00b      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_PWM_Start+0xa2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cfc:	e003      	b.n	8001d06 <HAL_TIM_PWM_Start+0xaa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	6839      	ldr	r1, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fc5c 	bl	80025cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_TIM_PWM_Start+0x138>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_TIM_PWM_Start+0x138>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00e      	beq.n	8001d56 <HAL_TIM_PWM_Start+0xfa>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d009      	beq.n	8001d56 <HAL_TIM_PWM_Start+0xfa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <HAL_TIM_PWM_Start+0x13c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <HAL_TIM_PWM_Start+0xfa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <HAL_TIM_PWM_Start+0x140>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d111      	bne.n	8001d7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d010      	beq.n	8001d8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d78:	e007      	b.n	8001d8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800

08001da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e0ae      	b.n	8001f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0c      	cmp	r3, #12
 8001dca:	f200 809f 	bhi.w	8001f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001e09 	.word	0x08001e09
 8001dd8:	08001f0d 	.word	0x08001f0d
 8001ddc:	08001f0d 	.word	0x08001f0d
 8001de0:	08001f0d 	.word	0x08001f0d
 8001de4:	08001e49 	.word	0x08001e49
 8001de8:	08001f0d 	.word	0x08001f0d
 8001dec:	08001f0d 	.word	0x08001f0d
 8001df0:	08001f0d 	.word	0x08001f0d
 8001df4:	08001e8b 	.word	0x08001e8b
 8001df8:	08001f0d 	.word	0x08001f0d
 8001dfc:	08001f0d 	.word	0x08001f0d
 8001e00:	08001f0d 	.word	0x08001f0d
 8001e04:	08001ecb 	.word	0x08001ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f9be 	bl	8002190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0208 	orr.w	r2, r2, #8
 8001e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6999      	ldr	r1, [r3, #24]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	619a      	str	r2, [r3, #24]
      break;
 8001e46:	e064      	b.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fa04 	bl	800225c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6999      	ldr	r1, [r3, #24]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	021a      	lsls	r2, r3, #8
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]
      break;
 8001e88:	e043      	b.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fa4d 	bl	8002330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0208 	orr.w	r2, r2, #8
 8001ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0204 	bic.w	r2, r2, #4
 8001eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69d9      	ldr	r1, [r3, #28]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	61da      	str	r2, [r3, #28]
      break;
 8001ec8:	e023      	b.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fa97 	bl	8002404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69d9      	ldr	r1, [r3, #28]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_TIM_ConfigClockSource+0x1c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0b4      	b.n	80020aa <HAL_TIM_ConfigClockSource+0x186>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f78:	d03e      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8001f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f7e:	f200 8087 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f86:	f000 8086 	beq.w	8002096 <HAL_TIM_ConfigClockSource+0x172>
 8001f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8e:	d87f      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b70      	cmp	r3, #112	@ 0x70
 8001f92:	d01a      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0xa6>
 8001f94:	2b70      	cmp	r3, #112	@ 0x70
 8001f96:	d87b      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b60      	cmp	r3, #96	@ 0x60
 8001f9a:	d050      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x11a>
 8001f9c:	2b60      	cmp	r3, #96	@ 0x60
 8001f9e:	d877      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa0:	2b50      	cmp	r3, #80	@ 0x50
 8001fa2:	d03c      	beq.n	800201e <HAL_TIM_ConfigClockSource+0xfa>
 8001fa4:	2b50      	cmp	r3, #80	@ 0x50
 8001fa6:	d873      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b40      	cmp	r3, #64	@ 0x40
 8001faa:	d058      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x13a>
 8001fac:	2b40      	cmp	r3, #64	@ 0x40
 8001fae:	d86f      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b30      	cmp	r3, #48	@ 0x30
 8001fb2:	d064      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x15a>
 8001fb4:	2b30      	cmp	r3, #48	@ 0x30
 8001fb6:	d86b      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d060      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x15a>
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d867      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05c      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x15a>
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d05a      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	e062      	b.n	8002090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fda:	f000 fad8 	bl	800258e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	609a      	str	r2, [r3, #8]
      break;
 8001ff6:	e04f      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002008:	f000 fac1 	bl	800258e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800201a:	609a      	str	r2, [r3, #8]
      break;
 800201c:	e03c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800202a:	461a      	mov	r2, r3
 800202c:	f000 fa38 	bl	80024a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2150      	movs	r1, #80	@ 0x50
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fa8f 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 800203c:	e02c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800204a:	461a      	mov	r2, r3
 800204c:	f000 fa56 	bl	80024fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2160      	movs	r1, #96	@ 0x60
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fa7f 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 800205c:	e01c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800206a:	461a      	mov	r2, r3
 800206c:	f000 fa18 	bl	80024a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fa6f 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 800207c:	e00c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f000 fa66 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 800208e:	e003      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e000      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <TIM_Base_SetConfig+0xd0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0x30>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002188 <TIM_Base_SetConfig+0xd4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0x30>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a2b      	ldr	r2, [pc, #172]	@ (800218c <TIM_Base_SetConfig+0xd8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d108      	bne.n	80020f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a22      	ldr	r2, [pc, #136]	@ (8002184 <TIM_Base_SetConfig+0xd0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <TIM_Base_SetConfig+0xd4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0x62>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <TIM_Base_SetConfig+0xd8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <TIM_Base_SetConfig+0xd0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d103      	bne.n	800215c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f023 0201 	bic.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	611a      	str	r2, [r3, #16]
  }
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40000400 	.word	0x40000400
 800218c:	40000800 	.word	0x40000800

08002190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f023 0201 	bic.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f023 0302 	bic.w	r3, r3, #2
 80021d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <TIM_OC1_SetConfig+0xc8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d10c      	bne.n	8002206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f023 0308 	bic.w	r3, r3, #8
 80021f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <TIM_OC1_SetConfig+0xc8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d111      	bne.n	8002232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800221c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	621a      	str	r2, [r3, #32]
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40012c00 	.word	0x40012c00

0800225c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f023 0210 	bic.w	r2, r3, #16
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800228a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f023 0320 	bic.w	r3, r3, #32
 80022a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <TIM_OC2_SetConfig+0xd0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d10d      	bne.n	80022d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a14      	ldr	r2, [pc, #80]	@ (800232c <TIM_OC2_SetConfig+0xd0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d113      	bne.n	8002308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	40012c00 	.word	0x40012c00

08002330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <TIM_OC3_SetConfig+0xd0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10d      	bne.n	80023aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a14      	ldr	r2, [pc, #80]	@ (8002400 <TIM_OC3_SetConfig+0xd0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d113      	bne.n	80023da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00

08002404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800243a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800244e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	031b      	lsls	r3, r3, #12
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a0f      	ldr	r2, [pc, #60]	@ (800249c <TIM_OC4_SetConfig+0x98>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d109      	bne.n	8002478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800246a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00

080024a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	f023 0201 	bic.w	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f023 030a 	bic.w	r3, r3, #10
 80024dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	621a      	str	r2, [r3, #32]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f023 0210 	bic.w	r2, r3, #16
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	031b      	lsls	r3, r3, #12
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002538:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	621a      	str	r2, [r3, #32]
}
 8002550:	bf00      	nop
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	f043 0307 	orr.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	021a      	lsls	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	609a      	str	r2, [r3, #8]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	401a      	ands	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	621a      	str	r2, [r3, #32]
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002628:	2302      	movs	r3, #2
 800262a:	e046      	b.n	80026ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002678:	d009      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a10      	ldr	r2, [pc, #64]	@ (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10c      	bne.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800

080026d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e03d      	b.n	8002768 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e042      	b.n	800280a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d106      	bne.n	800279e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fe fa21 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2224      	movs	r2, #36	@ 0x24
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f97e 	bl	8002ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b08a      	sub	sp, #40	@ 0x28
 8002816:	af02      	add	r7, sp, #8
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	f040 8081 	bne.w	8002936 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Receive+0x2e>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e079      	b.n	8002938 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2222      	movs	r2, #34	@ 0x22
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002858:	f7fe fabe 	bl	8000dd8 <HAL_GetTick>
 800285c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002872:	d108      	bne.n	8002886 <HAL_UART_Receive+0x74>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e003      	b.n	800288e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800288e:	e047      	b.n	8002920 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	2120      	movs	r1, #32
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f850 	bl	8002940 <UART_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e042      	b.n	8002938 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e01f      	b.n	8002912 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028da:	d007      	beq.n	80028ec <HAL_UART_Receive+0xda>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_UART_Receive+0xe8>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e008      	b.n	800290c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002906:	b2da      	uxtb	r2, r3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	3301      	adds	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1b2      	bne.n	8002890 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	e03b      	b.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d037      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295a:	f7fe fa3d 	bl	8000dd8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <UART_WaitOnFlagUntilTimeout+0x30>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e03a      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b80      	cmp	r3, #128	@ 0x80
 8002986:	d020      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b40      	cmp	r3, #64	@ 0x40
 800298c:	d01d      	beq.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	d116      	bne.n	80029ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f81d 	bl	80029f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2208      	movs	r2, #8
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d0b4      	beq.n	8002952 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b095      	sub	sp, #84	@ 0x54
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e5      	bne.n	80029fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3314      	adds	r3, #20
 8002a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e5      	bne.n	8002a2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d119      	bne.n	8002a9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	330c      	adds	r3, #12
 8002a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f023 0310 	bic.w	r3, r3, #16
 8002a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	330c      	adds	r3, #12
 8002a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a8a:	61ba      	str	r2, [r7, #24]
 8002a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6979      	ldr	r1, [r7, #20]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	613b      	str	r3, [r7, #16]
   return(result);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e5      	bne.n	8002a6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aac:	bf00      	nop
 8002aae:	3754      	adds	r7, #84	@ 0x54
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
	...

08002ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002af2:	f023 030c 	bic.w	r3, r3, #12
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bcc <UART_SetConfig+0x114>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7fe ffc2 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7fe ffaa 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a22      	ldr	r2, [pc, #136]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	0119      	lsls	r1, r3, #4
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	@ 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	@ 0x32
 8002b78:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b84:	4419      	add	r1, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	@ 0x32
 8002bb0:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2600      	movs	r6, #0
 8002be8:	4d0c      	ldr	r5, [pc, #48]	@ (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	@ (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f81a 	bl	8002c2c <_init>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4d0a      	ldr	r5, [pc, #40]	@ (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002c70 	.word	0x08002c70
 8002c20:	08002c70 	.word	0x08002c70
 8002c24:	08002c70 	.word	0x08002c70
 8002c28:	08002c78 	.word	0x08002c78

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
